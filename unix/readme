
Current directory>> . 
Parent directory of the current directory>> ..
Home directory>> ∼

Long commands on the shell can be splitted into multiple lines:
I Digit \ on the prompt at the end of a long incomplete command.
I Press ENTER. The symbol > appears on a new line on the prompt.
I Continue entering the command.

List directory contents>> ls
  The ls command accepts many optional arguments to make the listing more specific:
  I The -F option shows / after each directory name, * after each executable file name, etc.
  I The --color=auto (-G on OsX) option enables colorized output.
  I The -l option lists in long format (permissions, username, groupname, size, creation date). 
  I The -h options shows the file sizes in Byte, Kilobyte, etc.
  example: user$ ls -Flh --color=auto
  *** We don’t have to digit all our favourite options every time we use the ls command,
      we can create an alias. example: user$ alias ls=’ls -Fh --color=auto’
  *** It is possible to use ls to list the content of a directory. example: user$ ls data/
  
Change directory>> cd
***In order to return back to the home directory it is sufficient to enter the cd command,
without specifying a path name, or cd followed by ∼.

Return working directory name>> pwd
  prints the full path name of the current working directory
  
Change file modes or Access Control Lists>> chmod
  The chmod command is used to change the permissions of a file or directory.
  chmod <code> <file/directory>
***Only the owner of the file can change its accession rights.
***Example: we cannot execute a file that has no execution permissions.
***Alternative syntax for the code parameter of chmod: 
  u (owner), g (group), o (everybody)
  + (add permission), - (remove permission)
  r (read), w (write), x (execute)
  example: user$ chmod u+x <file/directory>

Copy files>> cp
  The cp command creates copies of files or directories.
  General syntax for making a copy of a file:
  cp <source file> <target file>
  example: 
  > user$ cp kmer1 . txt file
  > user$ ls
  > data/ file kmer1 . txt kmer2 . txt
  ***If the target file already exists, it is overwritten with the source file.
  General syntax for making a copy of the entire content of a directory:
  cp -r <source directory> <target directory>
  ***If the target directory already exists, the source directory is copied into it.
  General syntax for copying a set of files and/or directories into a directory:
  cp -r <source file/dir1> <source file/dir2> ... <target directory>
  
  
  
Move/rename files>> mv
  The mv command can be used to move files and directories, as well as to rename them.
  Move a file into a directory: user$ mv file tmp/
  ***If the directory already contains a file with the same name, it is overwritten.
  Move a directory into a directory: user$ mv tmp/ data/
  ***If the target contains a file/directory with the same name, the command fails.
  Rename a file: user$ mv data/tmp/file data/tmp/file.txt
  Rename a directory: user$ mv data / d
  ***If the target directory already exists, the command moves the source directory into
  the target directory.
  
  
Remove directory entries>> rm
  The rm command can be used to remove files and directories.
  Remove a file: user$ rm d/tmp/data/1a2b.fasta
  ***Warning: the deletion is permanent!
  Remove an empty directory: user$ rmdir d / tmp / data
  ***If the directory is not empty, the rmdir command fails.
  Remove a non-empty directory: user$ rm -r d / tmp
  

Remove empty directories>> rmdir
  user$ rmdir d / tmp / data
  ***If the directory is not empty, the rmdir command fails.
  
Create a directory>> mkdir
  The mkdir command creates a new empty directory: user$ mkdir tmp
  
  
Change file access and modification times>> touch
  The touch command creates a new empty file.
  user$ touch tmp / file . txt
  ***If we touch an existing file, we change its access and modification times.

Display the content of the file>> more/less
  The content of very long files can be paged on the screen with the less command.
  We can scroll the file content by using the up and down arrows.
  The : at the bottom of the page are the prompt of the less command.
  In order to close the command, we have to digit q in the prompt.
  We can search for a pattern/string in the file by typing / followed by the string we want to search.
  The more command is the primitive version of less.
  
Walk a file hierarchy>> find
  The find command searches for files in the directory hierarchy.
  Simplified syntax
  find <search path> -<search type> <search argument>
  The search path option specifies the starting directory of the search.
  The command has several options. We can search a file by name, size, permissions,
  etc by using the correct search type option. We list just few of them:
  -name <pattern>: Searches a file by its name (pattern)
  -user <uname>: Searches files owned by uname
  -size n[cwbkMG]: Searches files using n units of space (c=bytes,M=MB, ..)
  -perm <mode>: Searches files whose permissions are exactly mode
  Example: search all files in the home directory with all the permissions.
  user$ find ~ - perm 777
  Example: search all files of size 10Mb that belong to the pippo user.
  user$ find / home - user pippo - size 10 M
  Example: search all files in the current directory whose name is data.txt
  user$ find . - name data . txt


The file permissions grants the rights to read (r), write (w), execute (x) the file:
--- >> 0 = 000 in binary 
--x >> 1 = 001 in binary
-w- >> 2 = 010 in binary
-wx >> 3 = 011 in binary
r-- >> 4 = 100 in binary
r-x >> 5 = 101 in binary
rw- >> 6 = 110 in binary
rwx >> 7 = 111 in binary
*** There is a set of three bits for file’s owner, owner’s group and general users.
    example: 777 means (rwxrwxrwx) No restriction on permissions. Anybody may do anything.
    example: 644 means (rw-r--r--) The owner can read and write the file. The others can only read it.

Basic information commands:

man : Format and display the on-line manual pages
  The man pages are the standard form of software documentation on Unix systems.
  There is a man page for (almost) all command line-tools in the system.
  There is a man page also for the man command.
  Most of the commands accept the --help option that shows a short help and the
  accepted command options.

which : Locate a program file in the user’s path
The which and whereis commands show path informations about the command line
tools: very useful when we are not sure about the command currently executed.
We can ask which executable is actually executed in the current environment
user$ which ls 

file : Determine file type
The file command tries to classify the content of a file.
user$ file new.txt script
new . txt : ASCII text
script : Bourne - Again shell script text executable

whereis : Locate programs
We can ask where is the executable, man page and source of the specified command
user$ whereis ls
ls : / bin / ls / usr / share / man / man1 / ls .1. gz

whatis : Display one-line manual page descriptions.
We can ask what is a specific command.
user$ whatis ls
ls (1)  - list directory contents

df : Display free disk space
It is quite common to run out of disk space while working with biological data.
The df command shows global disk usage statistics.
user$ df -h

du : Display disk usage statistics
The du command shows local disk usage statistics
user$ du -h

***In both cases, the -h option enables a Human-readable output (K, M, G, ..).

Basic compression/decompression commands

gzip/gunzip : Compress or expand files
Compression/decompression with gzip. Works on single files, not directories. Repla-
ces the original file with the compressed one.

zip/unzip : Package and compress (archive) files
Compression/decompression with zip. Works on single files and directories. Creates
a compressed copy of the file.
Compression/decompression of entire directories.
user$ zip -r dir . zip dir / user$ unzip dir . zip

tar : Manipulate tape archives
Compression/decompression with tar. Works on single files and directories. Creates
a compressed copy of the file.
user$ tar cfz file . tgz file . txt / user$ tar xfz file . tgz
Compression/decompression of entire directories.
user$ tar cfz dir . tgz dir / user$ tar xfz dir . tgz

Basic shell network utilities for login and managing files

wget : The non-interactive network downloader
The wget utility is the most versatile option to download files from Internet. It supports
the HTTP and FTP protocols.
To download a file with wget it is sufficient to pass as argument the url of the file.
The file will be saved in the current directory.
wget " http :// predictionce n t e r . org / download_area / CASP13 / predictions / contacts / RR
With the -r option we can download recursively the content of an entire directory.
wget -r " http :// pred i c t i o n c e n t e r . org / download_area / CASP13 / predictions / con
It is always a good idea to protect the url with "" in order to avoid problems when
the url contains characters that have a special meaning on the shell (for example, &).

scp : Secure copy (remote file copy program)
The scp utility allows files to be copied to, from, or between different hosts.
The syntax of scp is quite similar to those of cp with the difference that we need to
specify the remote host from or to which we want to transfer files.
scp u s e r n a m e @ re m o t e h o s t . edu :/ home / username / file1 . txt .
scp file2 . txt u s e r na m e @ r e m o t e h o s t . edu :/ home / username /
These command copy file1.txt and file2.txt respectively from and to the home
directory of username on remotehost.
The scp command support the recursive copy option -r.
Clearly, to use scp we need to have an account to some remote machine.

ssh : OpenSSH SSH client (remote login program)
Secure SHell, ssh, is a program for logging into a remote machine.
We need to have an account to the remote machine in order to login.
It provides a secure connection (encrypted communications) between the local machine
and the remote machine.
Notably, the password needed to login into the machine is encrypted as well.
Basic usage of ssh:
user$ ssh u s e r n a me @ r e m o t e h o s t . edu
u s e r n am e @ r e m o t e h os t . edu ’ s password :
The remote connection opens a remote shell on the local terminal.
We can work on the remote machine as if it was local.
Note: local and remote machine do not share their respective file systems. In order to
transfer files between the two machines we need to use some other tool, such as scp.

Some other miscellaneous commands

echo : Write arguments to the standard output
The echo command is built-in in the Unix shell.
It is not properly related to the manipulation of files, it simply writes on the terminal
its arguments.
user$ echo Hello , World !
Hello , World !

The -n option does not add a newline after the argument has been printed.
user$ echo -n Hello , World !
Hello , World ! user$

We can protect the string-argument with " " characters. These are not printed.
In the argument string we can include some formatting characters, such as tabs. In
order to use these formatting characters we need to protect the string with "" and use
the -e option.
user$ echo -e " Hello ,\ t \ t \ tWorld !"
Hello ,
World !
user$ echo " Hello ,\ t \ t \ tWorld !"
Hello ,\ t \ t \ tWorld !

Despite its simplicity, it can be very useful in complex scripts to print, for example,
error messages or other informations.

bc : An arbitrary precision calculator language
The tool bc is a command-line arbitrary-precision calculator language.
When we work on a Unix terminal, it is useful to have a command-line calculator.
The typical usage of the bc tool is to type bc on the prompt and enter a mathematical
expression.

user$ bc
bc 1.06.95
Copyright 1991 -1994 , 1997 , 1998 , 2000 , 2004 , 2006 Free Software Foundation ,
This is free software with ABSOLUTELY NO WARRANTY .
For details type ‘ warranty ’.
1+2
3

To quit the program we write quit on the prompt or we press CNTRL-D.
One of the most important features of bc is that it accepts input from files and from
the standard input (this will be clearer later).

rev : Reverse lines characterwise
The rev command reverses each line of a file.

user$ rev script
hsab / nib /!#
"! dlroW , olleH " ohce

This command is not very powerful, although it can be useful in bioinformatics analyses
to reverse nucleotide sequences.
As bc, it accepts input from the standard input

Wildcard

The Unix shell provides a set of special characters, wildcards, that can be used to
specify a single pattern that matches multiple file names.

* : Matches any number of any character, including none
? : Matches any single character
[abc] : Matches one character given in the bracket
[a-z] : Matches one character from the range given in the bracket
[!abc] : Matches any character that is not given in the bracket
[!a-z] : Matches any character that is not in the range given in the bracket
{aa,bb,cc} : Expands/generate any pattern that is given in the list

The process of matching expressions containing wildcards to filenames is called wild-
card/filename expansion or globbing.
Globbing is quite useful to execute commands on multiple files without the need of
listing all the file names.
The brace expansion {}, is similar to filename expansion but the names generated do
not need to be existing filenames.

List all files whose names ends with .txt
user$ ls *. txt

Copy all files whose names begin with a capital letter and contain at least three
characters.
user$ cp [A - Z ]??* tmp /

Remove execution permission to all files that end with .txt and that do not contain
the x character in their name.
user$ chmod -x *[! x ]*. txt

The shell performs filenames expansion whenever it sees unquoted wildcards in com-
mand’s arguments. For example,
user$ echo *

prints all the file and directory names in the current directory.
The following command uses brake expansion to generate all nucleotide 3-mers.
user$ echo {A ,C ,G , T }{ A ,C ,G , T }{ A ,C ,G , T }

The following command moves in the doc/ directory all files ending with .txt or .pdf
user$ mv *.{ txt , pdf } doc /

Certain classes of characters are available as special patterns:

[:lower:] Lower case characters a-z
[:upper:] Upper case characters A-Z
[:alpha:] Alphabetic characters: [:lower:] + [:upper:]
[:digit:] Decimal digits: 0-9
[:xdigit:] Exadecimal digits: 0-9, a-f, A-F
[:alnum:] Alphanumeric characters: [:alpha:] + [:digit:]
[:space:] Whitespace characters: spaces, tabs, newlines, etc
[:punct:] Punctuation characters:
[:graph:] Graphically printable characters: [:punct:]+[:alnum:]
[:print:] Printable characters: [:graph:] + [:space:]
[:cntrl:] Control characters: non-printable characters

We can use predifined classes in glob patterns.
Example: print all file names whose name begins with a letter and end with .txt.
user$ ls [[: alpha :]]*. txt

Redirection is used to control where the output of a command goes to, and where the
input of a command comes from.
In a Unix shell there are three files open by default and connected to the terminal.

Name  FD
stdin 0 Standard input stream (e.g. keyboard)
stdout  1 Standard output stream (e.g. monitor)
stderr  2 Standard error output stream (usually on monitor)

Both stdout and stderr are output streams. The only difference is that the stderr
stream is used specifically to output error and diagnostic messages.

The following table summarizes the most common redirection commands:

cmd > file  Redirects the standard output of cmd to file
cmd 2> file Redirects the standard error output of cmd to file
cmd &> file Redirects the standard output and error of cmd to file
cmd > file1 2> file2  Redirects the standard output of cmd to file1 and error to file2
cmd >> file Appends the redirected standard output of cmd to the end of file
cmd 2>> file  Appends the redirected standard error of cmd to the end of file
cmd < file  cmd takes the standard input from file
cmd1 | cmd2 Takes the standard output of cmd1 as standard input for cmd2

We can redirect program’s standard output and standard output error to files.
We can send the output of the ls command to a file.
user$ ls -l > lsout . txt

The following command
user$ ls a * b * > lsout . txt
saves into lsout.txt file the names of the files or directories beginning with a or b.
If there is no file/directory whose name begins with a or b an error message is printed
on the standard error (e.g. on the terminal).

If we are interested to save only the error messages, we can redirect uniquely the
standard error output
user$ ls a * b * 2 > lserr . txt

We can redirect both standard output and error to the same file
user$ ls a * b * & > ls . txt

We can redirect separately standard output and standard error output. It can be
sometimes useful to silence the error output by redirecting it to the null device
user$ ls a * b * > lsout . txt 2 > / dev / null

A redirection to an existing file overwrites its content. We can avoid to overwrite the
content of a file by appending the output to it.
The following command
user$ ls c * d * >> lsout . txt
appends to the lsout.txt file the output of the ls command.

In the same way, we can append also the standard error output
user$ ls c * d * 2 > > lserr . txt

The append syntax doesn’t always work with the &> command
user$ ls c * d * & > > ls . txt
- bash : syntax error near unexpected token ‘>’
In order to do this in a portable way, we need to send the standard error (file descriptor
2) to the standard output (file descriptor 1) by using the 2>&1 construct.
user$ ls c * d * >> ls . txt 2 >&1

Input redirection

Though standard input redirection is less common (and useful) than standard output
redirection, it can be used to read the standard input directly from a file.
As an example, we can send input to the less command by redirecting it from a file:
user$ less < / etc / passwd
This is perfectly equivalent to the following command:
user$ less / etc / passwd
In both cases, the content of the file passwd will be processed with less

Not all commands can read from the standard input. On such commands it makes no
sense to use the input redirection construct.
user$ ls < / etc / passwd
The ls does not read the text coming from the standard input, thus this command
will simply print the content of the current directory.

Pipes

The most useful redirection tool in the Unix shell is the redirection of the output of a
command to the input of another command.
The construct that allows this form of redirection is called pipe (|). Thanks to pipes
we can implement on the shell complex pipelines of commands.
The following is a simple way to easily inspect a long list of files in the current directory
user$ ls -l | less

The following is a simple way to quickly execute calculations with bc.
user$ echo "11^2*123+ sqrt (10)" | bc -l
14886.16227766016837933199

The -l option enables float precision to 20 decimal places, otherwise the operations
are performed in the domain of integers.
We can pipe multiple commands.
user$ echo "11^2*123+ sqrt (10)" | bc -l | rev
99133973861066772261.68841

Except for the first command, it is possible to include in a pipeline only commands
that read from the standard input.
It is possible to redirect the final output of the pipeline to a file.
  
Duplicate output stream

If we redirect the output to a file, we cannot send it also to a pipe.
Example: the output is sent to a file and not to the rev command, which does not
receive input.
user$ echo "11^2*123+ sqrt (10)" | bc -l > result . txt | rev
user$ cat result . txt
14886.16227766016837933199
In some pipelines, it can be useful i to save partially-processed output.
The tee command can be used to duplicate the output stream.
We can use tee in a pipeline to send the partially processed output to a file and, at
the same time, send it to the standard output.
user$ echo "11^2*123+ sqrt (10)" | bc -l | tee result . txt | rev
99133973861066772261.68841
user$ cat result . txt
14886.16227766016837933199
We can specify more than one file name as argument for tee: the output is duplicated
in each specified file.
The -a option appends the output in the specified files.


Basic shell text manipulation commands

cat Concatenate and print files
The cat command prints the content of a file on the terminal.
The cat command can be used to concatenate the content of multiple files
The following two ways of copying a file are perfectly equivalent.
user$ cat < old . txt > new . txt
user$ cp old . txt new . txt

head  Display first lines of a file
The head command shows the first lines of a file. We can specify the number of lines
we want to see with the -n option (n should be substituted with a number).

tail  Display the last part of a file
The tail command shows the last lines of a file. Same syntax as the head command.
***We can use tail to show the last lines starting from some offset:
example: user$ tail -n +4 kmer . txt
The content of the kmer.txt file is printed starting from the fourth line.
Note: in some implementations the -n syntax is available also by the head command,
i.e. head -n -4 prints all the lines but the last 4.
By default, head and tail print the first and last 10 lines of the file, respectively.

sort  Sort lines of text files
The sort command sorts text lines. We can sort lexicographically, numerically and
with respect to specific column(s).
Default: lexicographic sort the entire file content, line by line.
Sort with respect to a specific column: user$ sort -k 2 kmer1 . txt
Numeric sort can be imposed with the -n option: user$ sort -k 1 -n kmer1 . txt
Duplicated lines can be removed with the -u option: user$ sort -k 1 -n -u kmer1 . txt
Sort ordering can be reversed with the -r option: user$ sort -k 1 -n -u -r kmer1 . txt

uniq  Report or filter out repeated lines in a file
cut Cut out selected portions of each line of a file
wc  Word, line, character, and byte count
diff  Compare files line by line
comm  Select or reject lines common to two files

***All these commands, but diff and comm, read from the standard input.

