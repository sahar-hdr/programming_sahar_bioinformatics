
Current directory>> . 
Parent directory of the current directory>> ..
Home directory>> ∼

Long commands on the shell can be splitted into multiple lines:
I Digit \ on the prompt at the end of a long incomplete command.
I Press ENTER. The symbol > appears on a new line on the prompt.
I Continue entering the command.

List directory contents>> ls
  The ls command accepts many optional arguments to make the listing more specific:
  I The -F option shows / after each directory name, * after each executable file name, etc.
  I The --color=auto (-G on OsX) option enables colorized output.
  I The -l option lists in long format (permissions, username, groupname, size, creation date). 
  I The -h options shows the file sizes in Byte, Kilobyte, etc.
  example: user$ ls -Flh --color=auto
  *** We don’t have to digit all our favourite options every time we use the ls command,
      we can create an alias. example: user$ alias ls=’ls -Fh --color=auto’
  *** It is possible to use ls to list the content of a directory. example: user$ ls data/
  
Change directory>> cd
***In order to return back to the home directory it is sufficient to enter the cd command,
without specifying a path name, or cd followed by ∼.

Return working directory name>> pwd
  prints the full path name of the current working directory
  
Change file modes or Access Control Lists>> chmod
  The chmod command is used to change the permissions of a file or directory.
  chmod <code> <file/directory>
***Only the owner of the file can change its accession rights.
***Example: we cannot execute a file that has no execution permissions.
***Alternative syntax for the code parameter of chmod: 
  u (owner), g (group), o (everybody)
  + (add permission), - (remove permission)
  r (read), w (write), x (execute)
  example: user$ chmod u+x <file/directory>

Copy files>> cp
  The cp command creates copies of files or directories.
  General syntax for making a copy of a file:
  cp <source file> <target file>
  example: 
  > user$ cp kmer1 . txt file
  > user$ ls
  > data/ file kmer1 . txt kmer2 . txt
  ***If the target file already exists, it is overwritten with the source file.
  General syntax for making a copy of the entire content of a directory:
  cp -r <source directory> <target directory>
  ***If the target directory already exists, the source directory is copied into it.
  General syntax for copying a set of files and/or directories into a directory:
  cp -r <source file/dir1> <source file/dir2> ... <target directory>
  
  
  
Move/rename files>> mv
  The mv command can be used to move files and directories, as well as to rename them.
  Move a file into a directory: user$ mv file tmp/
  ***If the directory already contains a file with the same name, it is overwritten.
  Move a directory into a directory: user$ mv tmp/ data/
  ***If the target contains a file/directory with the same name, the command fails.
  Rename a file: user$ mv data/tmp/file data/tmp/file.txt
  Rename a directory: user$ mv data / d
  ***If the target directory already exists, the command moves the source directory into
  the target directory.
  
  
Remove directory entries>> rm
  The rm command can be used to remove files and directories.
  Remove a file: user$ rm d/tmp/data/1a2b.fasta
  ***Warning: the deletion is permanent!
  Remove an empty directory: user$ rmdir d / tmp / data
  ***If the directory is not empty, the rmdir command fails.
  Remove a non-empty directory: user$ rm -r d / tmp
  

Remove empty directories>> rmdir
  user$ rmdir d / tmp / data
  ***If the directory is not empty, the rmdir command fails.
  
Create a directory>> mkdir
  The mkdir command creates a new empty directory: user$ mkdir tmp
  
  
Change file access and modification times>> touch
  The touch command creates a new empty file.
  user$ touch tmp / file . txt
  ***If we touch an existing file, we change its access and modification times.

Display the content of the file>> more/less
  The content of very long files can be paged on the screen with the less command.
  We can scroll the file content by using the up and down arrows.
  The : at the bottom of the page are the prompt of the less command.
  In order to close the command, we have to digit q in the prompt.
  We can search for a pattern/string in the file by typing / followed by the string we want to search.
  The more command is the primitive version of less.
  
Walk a file hierarchy>> find
  The find command searches for files in the directory hierarchy.
  Simplified syntax
  find <search path> -<search type> <search argument>
  The search path option specifies the starting directory of the search.
  The command has several options. We can search a file by name, size, permissions,
  etc by using the correct search type option. We list just few of them:
  -name <pattern>: Searches a file by its name (pattern)
  -user <uname>: Searches files owned by uname
  -size n[cwbkMG]: Searches files using n units of space (c=bytes,M=MB, ..)
  -perm <mode>: Searches files whose permissions are exactly mode
  Example: search all files in the home directory with all the permissions.
  user$ find ~ - perm 777
  Example: search all files of size 10Mb that belong to the pippo user.
  user$ find / home - user pippo - size 10 M
  Example: search all files in the current directory whose name is data.txt
  user$ find . - name data . txt


The file permissions grants the rights to read (r), write (w), execute (x) the file:
--- >> 0 = 000 in binary 
--x >> 1 = 001 in binary
-w- >> 2 = 010 in binary
-wx >> 3 = 011 in binary
r-- >> 4 = 100 in binary
r-x >> 5 = 101 in binary
rw- >> 6 = 110 in binary
rwx >> 7 = 111 in binary
*** There is a set of three bits for file’s owner, owner’s group and general users.
    example: 777 means (rwxrwxrwx) No restriction on permissions. Anybody may do anything.
    example: 644 means (rw-r--r--) The owner can read and write the file. The others can only read it.

Basic information commands:

man : Format and display the on-line manual pages
  The man pages are the standard form of software documentation on Unix systems.
  There is a man page for (almost) all command line-tools in the system.
  There is a man page also for the man command.
  Most of the commands accept the --help option that shows a short help and the
  accepted command options.

which : Locate a program file in the user’s path
The which and whereis commands show path informations about the command line
tools: very useful when we are not sure about the command currently executed.
We can ask which executable is actually executed in the current environment
user$ which ls 

file : Determine file type
The file command tries to classify the content of a file.
user$ file new.txt script
new . txt : ASCII text
script : Bourne - Again shell script text executable

whereis : Locate programs
We can ask where is the executable, man page and source of the specified command
user$ whereis ls
ls : / bin / ls / usr / share / man / man1 / ls .1. gz

whatis : Display one-line manual page descriptions.
We can ask what is a specific command.
user$ whatis ls
ls (1)  - list directory contents

df : Display free disk space
It is quite common to run out of disk space while working with biological data.
The df command shows global disk usage statistics.
user$ df -h

du : Display disk usage statistics
The du command shows local disk usage statistics
user$ du -h

***In both cases, the -h option enables a Human-readable output (K, M, G, ..).

Basic compression/decompression commands

gzip/gunzip : Compress or expand files
Compression/decompression with gzip. Works on single files, not directories. Repla-
ces the original file with the compressed one.

zip/unzip : Package and compress (archive) files
Compression/decompression with zip. Works on single files and directories. Creates
a compressed copy of the file.
Compression/decompression of entire directories.
user$ zip -r dir . zip dir / user$ unzip dir . zip

tar : Manipulate tape archives
Compression/decompression with tar. Works on single files and directories. Creates
a compressed copy of the file.
user$ tar cfz file . tgz file . txt / user$ tar xfz file . tgz
Compression/decompression of entire directories.
user$ tar cfz dir . tgz dir / user$ tar xfz dir . tgz

Basic shell network utilities for login and managing files

wget : The non-interactive network downloader
The wget utility is the most versatile option to download files from Internet. It supports
the HTTP and FTP protocols.
To download a file with wget it is sufficient to pass as argument the url of the file.
The file will be saved in the current directory.
wget " http :// predictionce n t e r . org / download_area / CASP13 / predictions / contacts / RR
With the -r option we can download recursively the content of an entire directory.
wget -r " http :// pred i c t i o n c e n t e r . org / download_area / CASP13 / predictions / con
It is always a good idea to protect the url with "" in order to avoid problems when
the url contains characters that have a special meaning on the shell (for example, &).

scp : Secure copy (remote file copy program)
The scp utility allows files to be copied to, from, or between different hosts.
The syntax of scp is quite similar to those of cp with the difference that we need to
specify the remote host from or to which we want to transfer files.
scp u s e r n a m e @ re m o t e h o s t . edu :/ home / username / file1 . txt .
scp file2 . txt u s e r na m e @ r e m o t e h o s t . edu :/ home / username /
These command copy file1.txt and file2.txt respectively from and to the home
directory of username on remotehost.
The scp command support the recursive copy option -r.
Clearly, to use scp we need to have an account to some remote machine.

ssh : OpenSSH SSH client (remote login program)
Secure SHell, ssh, is a program for logging into a remote machine.
We need to have an account to the remote machine in order to login.
It provides a secure connection (encrypted communications) between the local machine
and the remote machine.
Notably, the password needed to login into the machine is encrypted as well.
Basic usage of ssh:
user$ ssh u s e r n a me @ r e m o t e h o s t . edu
u s e r n am e @ r e m o t e h os t . edu ’ s password :
The remote connection opens a remote shell on the local terminal.
We can work on the remote machine as if it was local.
Note: local and remote machine do not share their respective file systems. In order to
transfer files between the two machines we need to use some other tool, such as scp.







  
